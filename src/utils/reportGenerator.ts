import jsPDF from 'jspdf';
import { DemoUser, Activity } from '@/types';

export class ReportGenerator {
  static generateCSV(user: DemoUser): string {
    const headers = [
      'Date',
      'Type',
      'Activity Title',
      'Description',
      'Score',
      'Cumulative Score'
    ];

    let cumulativeScore = 0;
    const rows = user.activities
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
      .map((activity) => {
        cumulativeScore += activity.score;
        return [
          activity.date,
          activity.type,
          `"${activity.title}"`,
          `"${activity.description}"`,
          activity.score,
          cumulativeScore
        ];
      });

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.join(','))
    ].join('\\n');

    return csvContent;
  }

  static downloadCSV(user: DemoUser): void {
    const csvContent = this.generateCSV(user);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${user.name}-activity-report.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  static generatePDFReport(user: DemoUser): void {
    const doc = new jsPDF();
    
    // 헤더
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('ESG Activity Report', 105, 20, { align: 'center' });
    
    // 사용자 정보
    doc.setFontSize(14);
    doc.text(`Volunteer: ${user.name}`, 20, 40);
    doc.setFontSize(12);
    doc.text(`Report Generated: ${new Date().toLocaleDateString()}`, 20, 50);
    doc.text(`Total Activities: ${user.activities.length}`, 20, 60);
    doc.text(`Total Score: ${user.totalScore} points`, 20, 70);
    
    // ESG 점수 분석
    const esgScores = user.activities.reduce(
      (acc, activity) => {
        acc[activity.type] += activity.score;
        return acc;
      },
      { E: 0, S: 0, G: 0 }
    );
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('ESG Score Analysis', 20, 90);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(`Environmental (E): ${esgScores.E} points (${((esgScores.E / user.totalScore) * 100).toFixed(1)}%)`, 20, 105);
    doc.text(`Social (S): ${esgScores.S} points (${((esgScores.S / user.totalScore) * 100).toFixed(1)}%)`, 20, 115);
    doc.text(`Governance (G): ${esgScores.G} points (${((esgScores.G / user.totalScore) * 100).toFixed(1)}%)`, 20, 125);
    
    // 월별 활동 통계
    const monthlyStats = this.calculateMonthlyStats(user.activities);
    
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Monthly Activity Statistics', 20, 145);
    
    let yPos = 160;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    Object.entries(monthlyStats).forEach(([month, data]) => {
      doc.text(`${month}: ${data.count} activities, ${data.score} points`, 20, yPos);
      yPos += 10;
    });
    
    // 활동 목록 (요약)
    yPos += 10;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Activity Summary', 20, yPos);
    
    yPos += 15;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    
    // 테이블 헤더
    doc.text('Date', 20, yPos);
    doc.text('Type', 45, yPos);
    doc.text('Activity', 65, yPos);
    doc.text('Score', 160, yPos);
    yPos += 5;
    doc.line(20, yPos, 180, yPos);
    yPos += 8;
    
    user.activities
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .forEach((activity) => {
        if (yPos > 270) {
          doc.addPage();
          yPos = 20;
        }
        
        const formattedDate = new Date(activity.date).toLocaleDateString('en-US');
        const title = activity.title.length > 30 
          ? activity.title.substring(0, 30) + '...' 
          : activity.title;
        
        doc.text(formattedDate, 20, yPos);
        doc.text(activity.type, 45, yPos);
        doc.text(title, 65, yPos);
        doc.text(`${activity.score}`, 160, yPos);
        
        yPos += 10;
      });
    
    // 푸터
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text(`Page ${i} of ${pageCount}`, 20, doc.internal.pageSize.height - 10);
      doc.text('Generated by ESG Volunteer Platform (Demo)', doc.internal.pageSize.width - 20, doc.internal.pageSize.height - 10, { align: 'right' });
    }
    
    // 다운로드
    doc.save(`${user.name}-activity-report.pdf`);
  }

  private static calculateMonthlyStats(activities: Activity[]): Record<string, { count: number; score: number }> {
    const stats: Record<string, { count: number; score: number }> = {};
    
    activities.forEach((activity) => {
      const date = new Date(activity.date);
      const monthKey = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
      
      if (!stats[monthKey]) {
        stats[monthKey] = { count: 0, score: 0 };
      }
      
      stats[monthKey].count += 1;
      stats[monthKey].score += activity.score;
    });
    
    return stats;
  }
}